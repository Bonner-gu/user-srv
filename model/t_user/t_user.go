// ============================================================================
// This is auto-generated by gf cli tool only once. Fill this file as you wish.
// ============================================================================

package t_user

import (
	"dm_user_srv/constant"
	"dm_user_srv/lib/ecode"
	"fmt"

	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/util/gconv"
)

// Fill with you ideas below.

// 获取列表数据(分页)
func GetMany(condition g.Map, page int32, size int32, orderBy string, orderRule string) (total int32, rows []*Entity) {
	// 未被删除的数据
	//condition["f_delete_time is null"] = true

	// 获取总数量
	r, _ := Model.Count(condition)
	if r == 0 {
		total = 0
		return
	} else {
		total = gconv.Int32(r)
	}

	// 计算排序规则
	var strOrderBy string
	if orderBy == "" || orderRule == "" {
		strOrderBy = "id desc"
	} else {
		strOrderBy = fmt.Sprintf("%s %s", orderBy, orderRule)
	}

	// 页码
	if page <= 1 {
		page = constant.BasePage
	}

	// 数量
	if size <= 0 || size > 10000 {
		size = constant.BaseSize
	}

	// 获取db
	rows, err := Model.Page(int(page), int(size)).Order(strOrderBy).FindAll(condition)
	if err != nil {
		g.Log().Errorf("获取数据失败 [err:%v]", err.Error())
		return
	}
	return
}

// 获取单个数据
func GetOne(condition g.Map) (rspInfo *Entity) {
	r, err := Model.FindOne(condition)
	if err != nil {
		g.Log().Line().Errorf("获取数据失败 [fun:GetOne] [err:%v]", err.Error())
		return nil
	} else {
		rspInfo = r
		g.Log().Debugf("获取数据成功 [fun:GetOne] [r:%v]", r)
	}

	return
}

// 添加
func CreateOne(info *Entity) error {
	r, err := Model.Save(info)
	if err != nil {
		g.Log().Line().Errorf("db操作添加失败 [err:%v]", err.Error())
		return ecode.MysqlManageErr
	}

	RowsAffected, _ := r.RowsAffected()
	if RowsAffected <= 0 {
		g.Log().Line().Errorf("db操作添加失败 [RowsAffected:%v]", RowsAffected)
		return ecode.MysqlManageErr
	} else {
		g.Log().Debugf("数据添加成功 [RowsAffected:%v] [info:%v]", RowsAffected, info)
	}

	return nil
}

// 修改数据
func ModifyBase(updateInfo interface{}, info *Entity) error {
	r, err := Model.Data(updateInfo).Where(g.Map{"phone": info.Phone}).Update()
	if err != nil {
		g.Log().Line().Errorf("db操作失败 [err:%v]", err.Error())
		return ecode.MysqlManageErr
	}

	RowsAffected, _ := r.RowsAffected()
	if RowsAffected <= 0 {
		g.Log().Line().Errorf("db操作失败 [RowsAffected:%v]", RowsAffected)
		return ecode.MysqlManageErr
	} else {
		g.Log().Debugf("数据修改成功 [RowsAffected:%v] [updateinfo:%v] [info:%v]", RowsAffected, updateInfo, info)
	}

	return nil
}
